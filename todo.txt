【実装済み】
・落下blockが左右にはみ出さないようにする
・一番下に着いたら位置を固定して設置
・横1列揃ったら消えるようにする
・消したブロックの個数を記録して表示
・新しいblockを生成できなくなったらgameoverに
・ブロックのtypeに対応した形を生成
・落下blockの回転を出来るようにする
・落下blockにランダムな色を当てる
・色が揃った時に消えるようにする
・scoreの計算
・枠外に出た時の対応
・色と列が同時に揃った時の処理
・Iミノが上にはみ出した時の処理
・lineで消えた後の落下によるcolor消し
・毎フレームごとにcanvasのクリア
・高速落下の実装
・同じ色のみのミノが出ないようにする
・includesで書き換え
・次のblockが表示されるようにする
・blockの保存/交換

【実装予定】
・色が消えて落下する際に適切にミノも落下するようにする
　→colorClearと連動し同じマス数だけ下げるか否か
・blockを置き一定時間そのままにしてから消える描写を入れる

【バグ報告】
・時折上下で分解される？→putの際の処理落ちに関係があるかも



block color
playable x,y,type,rotation


    /* --- 基本レイアウト --- */
    :root{
      --tile-size: 50px; /* JS の width と合わせる */
      --board-width: calc(var(--tile-size) * 10);
      --board-height: calc(var(--tile-size) * 15);
      --sidebar-width: 260px;
      --gap: 24px;
      --bg: #f6f7fb;
      --panel-bg: #ffffff;
      --muted: #6b7280;
      --accent: #111827;
      font-family: Inter, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial;
    }

    html,body{
      height:100%;
      margin:0;
      background: linear-gradient(180deg,#eef2ff 0%, var(--bg) 100%);
      -webkit-font-smoothing:antialiased;
      -moz-osx-font-smoothing:grayscale;
    }

    /* 中央に横並びで配置 */
    .app{
      min-height:100vh;
      display:flex;
      align-items:center;
      justify-content:center;
      padding:32px;
      box-sizing:border-box;
    }

    .wrap{
      display:flex;
      gap:var(--gap);
      align-items:flex-start;
      background:transparent;
    }

    /* --- ゲーム盤 (canvas) --- */
    .board{
      width:var(--board-width);
      height:var(--board-height);
      box-shadow: 0 10px 30px rgba(17,24,39,0.12);
      border-radius:10px;
      overflow:hidden;
      background: linear-gradient(180deg,#ffffff 0%, #f8fafc 100%);
      display:block;
      position:relative;
    }

    /* canvas は JS が描画するのでピクセルサイズを明確に指定 */
    #canvas{
      display:block;
      width:var(--board-width);
      height:var(--board-height);
      image-rendering: pixelated; /* ブロックをシャープに見せる */
      border-radius:10px;
      background:transparent;
    }

    /* --- サイドバー --- */
    .sidebar{
      width:var(--sidebar-width);
      display:flex;
      flex-direction:column;
      gap:16px;
      align-items:stretch;
    }

    .panel{
      background:var(--panel-bg);
      padding:12px;
      border-radius:12px;
      box-shadow: 0 6px 18px rgba(15,23,42,0.06);
      min-height:180px;
      display:flex;
      flex-direction:column;
      gap:8px;
    }

    .panel h3{
      margin:0;
      font-size:13px;
      color:var(--muted);
      letter-spacing:0.02em;
    }

    .placeholder{
      height:150px;
      border-radius:8px;
      border:1px dashed #e6e9ee;
      display:flex;
      align-items:center;
      justify-content:center;
      color:#9aa4b2;
      font-weight:600;
      font-size:14px;
      background:linear-gradient(180deg, rgba(0,0,0,0.02), transparent);
    }

    .score{
      display:flex;
      align-items:center;
      justify-content:space-between;
      gap:8px;
    }

    .score .value{
      font-size:22px;
      font-weight:700;
      color:var(--accent);
    }

    /* キー説明や小さいヘルプ */
    .help{
      font-size:12px;
      color:var(--muted);
      line-height:1.4;
    }

    /* レスポンシブ: 縦幅が狭いときは縦並び */
    @media (max-width:900px){
      .wrap{flex-direction:column; align-items:center}
      .sidebar{width:100%; max-width:360px}
    }